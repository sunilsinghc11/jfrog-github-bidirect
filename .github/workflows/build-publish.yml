name: build-publish-scan
on:
    push:
        branches: [ "garjib" ]

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write
jobs:
    build-publish-python:
        runs-on: ubuntu-latest              
        env:
          DOCKER_REPO: 'optum-app1-sunil-docker-local'
          GOLDEN_IMAGE_NAME: 'my-demo-image:34'
          JF_URL: https://${{ vars.JF_URL }}/
          DOCKER_CLI_EXPERIMENTAL: enabled
        steps:
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
                JF_ACCESS_TOKEN: ${{ vars.JF_ACCESS_TOKEN }}
              
            - name: Checkout the repository
              uses: actions/checkout@v4

            - name: Cache Primes
              id: cache-primes
              uses: actions/cache@v4
              with:
                path: /usr/lib/python3/dist-packages
                key: python_requirements1

            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf pip-config --repo-resolve=optum-app1-sunil-py-virtual   

            - name: configure environment
              run: |    
               # pip install --upgrade pip     
               #  python3 -m pip install --upgrade pip setuptools wheel sigstore
               # wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: | 
                #export JFROG_CLI_LOG_LEVEL=DEBUG
                jf config show
                jf rt ping
                jf audit dist/
                jf pip install -r requirements.txt  --module=jfrog-python-example                
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ optum-app1-sunil-py-virtual/example-projects/ --module=jfrog-python-example

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: sunils@jfrog.com
                password: ${{ vars.JF_ACCESS_TOKEN }}
            
            - name: docker scan
              run: |  
                 jf docker pull ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker scan ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}   
          
        
